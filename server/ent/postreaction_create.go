// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/yura4ka/crickter/ent/post"
	"github.com/yura4ka/crickter/ent/postreaction"
	"github.com/yura4ka/crickter/ent/user"
)

// PostReactionCreate is the builder for creating a PostReaction entity.
type PostReactionCreate struct {
	config
	mutation *PostReactionMutation
	hooks    []Hook
}

// SetLiked sets the "liked" field.
func (prc *PostReactionCreate) SetLiked(b bool) *PostReactionCreate {
	prc.mutation.SetLiked(b)
	return prc
}

// SetID sets the "id" field.
func (prc *PostReactionCreate) SetID(u uuid.UUID) *PostReactionCreate {
	prc.mutation.SetID(u)
	return prc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (prc *PostReactionCreate) SetNillableID(u *uuid.UUID) *PostReactionCreate {
	if u != nil {
		prc.SetID(*u)
	}
	return prc
}

// SetPostID sets the "post" edge to the Post entity by ID.
func (prc *PostReactionCreate) SetPostID(id uuid.UUID) *PostReactionCreate {
	prc.mutation.SetPostID(id)
	return prc
}

// SetNillablePostID sets the "post" edge to the Post entity by ID if the given value is not nil.
func (prc *PostReactionCreate) SetNillablePostID(id *uuid.UUID) *PostReactionCreate {
	if id != nil {
		prc = prc.SetPostID(*id)
	}
	return prc
}

// SetPost sets the "post" edge to the Post entity.
func (prc *PostReactionCreate) SetPost(p *Post) *PostReactionCreate {
	return prc.SetPostID(p.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (prc *PostReactionCreate) SetUserID(id uuid.UUID) *PostReactionCreate {
	prc.mutation.SetUserID(id)
	return prc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (prc *PostReactionCreate) SetNillableUserID(id *uuid.UUID) *PostReactionCreate {
	if id != nil {
		prc = prc.SetUserID(*id)
	}
	return prc
}

// SetUser sets the "user" edge to the User entity.
func (prc *PostReactionCreate) SetUser(u *User) *PostReactionCreate {
	return prc.SetUserID(u.ID)
}

// Mutation returns the PostReactionMutation object of the builder.
func (prc *PostReactionCreate) Mutation() *PostReactionMutation {
	return prc.mutation
}

// Save creates the PostReaction in the database.
func (prc *PostReactionCreate) Save(ctx context.Context) (*PostReaction, error) {
	prc.defaults()
	return withHooks(ctx, prc.sqlSave, prc.mutation, prc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (prc *PostReactionCreate) SaveX(ctx context.Context) *PostReaction {
	v, err := prc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prc *PostReactionCreate) Exec(ctx context.Context) error {
	_, err := prc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prc *PostReactionCreate) ExecX(ctx context.Context) {
	if err := prc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (prc *PostReactionCreate) defaults() {
	if _, ok := prc.mutation.ID(); !ok {
		v := postreaction.DefaultID()
		prc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prc *PostReactionCreate) check() error {
	if _, ok := prc.mutation.Liked(); !ok {
		return &ValidationError{Name: "liked", err: errors.New(`ent: missing required field "PostReaction.liked"`)}
	}
	return nil
}

func (prc *PostReactionCreate) sqlSave(ctx context.Context) (*PostReaction, error) {
	if err := prc.check(); err != nil {
		return nil, err
	}
	_node, _spec := prc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	prc.mutation.id = &_node.ID
	prc.mutation.done = true
	return _node, nil
}

func (prc *PostReactionCreate) createSpec() (*PostReaction, *sqlgraph.CreateSpec) {
	var (
		_node = &PostReaction{config: prc.config}
		_spec = sqlgraph.NewCreateSpec(postreaction.Table, sqlgraph.NewFieldSpec(postreaction.FieldID, field.TypeUUID))
	)
	if id, ok := prc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := prc.mutation.Liked(); ok {
		_spec.SetField(postreaction.FieldLiked, field.TypeBool, value)
		_node.Liked = value
	}
	if nodes := prc.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   postreaction.PostTable,
			Columns: []string{postreaction.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.post_reactions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := prc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   postreaction.UserTable,
			Columns: []string{postreaction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_post_reactions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PostReactionCreateBulk is the builder for creating many PostReaction entities in bulk.
type PostReactionCreateBulk struct {
	config
	builders []*PostReactionCreate
}

// Save creates the PostReaction entities in the database.
func (prcb *PostReactionCreateBulk) Save(ctx context.Context) ([]*PostReaction, error) {
	specs := make([]*sqlgraph.CreateSpec, len(prcb.builders))
	nodes := make([]*PostReaction, len(prcb.builders))
	mutators := make([]Mutator, len(prcb.builders))
	for i := range prcb.builders {
		func(i int, root context.Context) {
			builder := prcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PostReactionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prcb *PostReactionCreateBulk) SaveX(ctx context.Context) []*PostReaction {
	v, err := prcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prcb *PostReactionCreateBulk) Exec(ctx context.Context) error {
	_, err := prcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prcb *PostReactionCreateBulk) ExecX(ctx context.Context) {
	if err := prcb.Exec(ctx); err != nil {
		panic(err)
	}
}
