// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/yura4ka/crickter/ent/comment"
	"github.com/yura4ka/crickter/ent/commentreaction"
	"github.com/yura4ka/crickter/ent/user"
)

// CommentReactionCreate is the builder for creating a CommentReaction entity.
type CommentReactionCreate struct {
	config
	mutation *CommentReactionMutation
	hooks    []Hook
}

// SetLiked sets the "liked" field.
func (crc *CommentReactionCreate) SetLiked(b bool) *CommentReactionCreate {
	crc.mutation.SetLiked(b)
	return crc
}

// SetID sets the "id" field.
func (crc *CommentReactionCreate) SetID(u uuid.UUID) *CommentReactionCreate {
	crc.mutation.SetID(u)
	return crc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (crc *CommentReactionCreate) SetNillableID(u *uuid.UUID) *CommentReactionCreate {
	if u != nil {
		crc.SetID(*u)
	}
	return crc
}

// SetCommentID sets the "comment" edge to the Comment entity by ID.
func (crc *CommentReactionCreate) SetCommentID(id uuid.UUID) *CommentReactionCreate {
	crc.mutation.SetCommentID(id)
	return crc
}

// SetNillableCommentID sets the "comment" edge to the Comment entity by ID if the given value is not nil.
func (crc *CommentReactionCreate) SetNillableCommentID(id *uuid.UUID) *CommentReactionCreate {
	if id != nil {
		crc = crc.SetCommentID(*id)
	}
	return crc
}

// SetComment sets the "comment" edge to the Comment entity.
func (crc *CommentReactionCreate) SetComment(c *Comment) *CommentReactionCreate {
	return crc.SetCommentID(c.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (crc *CommentReactionCreate) SetUserID(id uuid.UUID) *CommentReactionCreate {
	crc.mutation.SetUserID(id)
	return crc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (crc *CommentReactionCreate) SetNillableUserID(id *uuid.UUID) *CommentReactionCreate {
	if id != nil {
		crc = crc.SetUserID(*id)
	}
	return crc
}

// SetUser sets the "user" edge to the User entity.
func (crc *CommentReactionCreate) SetUser(u *User) *CommentReactionCreate {
	return crc.SetUserID(u.ID)
}

// Mutation returns the CommentReactionMutation object of the builder.
func (crc *CommentReactionCreate) Mutation() *CommentReactionMutation {
	return crc.mutation
}

// Save creates the CommentReaction in the database.
func (crc *CommentReactionCreate) Save(ctx context.Context) (*CommentReaction, error) {
	crc.defaults()
	return withHooks(ctx, crc.sqlSave, crc.mutation, crc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (crc *CommentReactionCreate) SaveX(ctx context.Context) *CommentReaction {
	v, err := crc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crc *CommentReactionCreate) Exec(ctx context.Context) error {
	_, err := crc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crc *CommentReactionCreate) ExecX(ctx context.Context) {
	if err := crc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (crc *CommentReactionCreate) defaults() {
	if _, ok := crc.mutation.ID(); !ok {
		v := commentreaction.DefaultID()
		crc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (crc *CommentReactionCreate) check() error {
	if _, ok := crc.mutation.Liked(); !ok {
		return &ValidationError{Name: "liked", err: errors.New(`ent: missing required field "CommentReaction.liked"`)}
	}
	return nil
}

func (crc *CommentReactionCreate) sqlSave(ctx context.Context) (*CommentReaction, error) {
	if err := crc.check(); err != nil {
		return nil, err
	}
	_node, _spec := crc.createSpec()
	if err := sqlgraph.CreateNode(ctx, crc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	crc.mutation.id = &_node.ID
	crc.mutation.done = true
	return _node, nil
}

func (crc *CommentReactionCreate) createSpec() (*CommentReaction, *sqlgraph.CreateSpec) {
	var (
		_node = &CommentReaction{config: crc.config}
		_spec = sqlgraph.NewCreateSpec(commentreaction.Table, sqlgraph.NewFieldSpec(commentreaction.FieldID, field.TypeUUID))
	)
	if id, ok := crc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := crc.mutation.Liked(); ok {
		_spec.SetField(commentreaction.FieldLiked, field.TypeBool, value)
		_node.Liked = value
	}
	if nodes := crc.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commentreaction.CommentTable,
			Columns: []string{commentreaction.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.comment_reactions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := crc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commentreaction.UserTable,
			Columns: []string{commentreaction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_comment_reactions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CommentReactionCreateBulk is the builder for creating many CommentReaction entities in bulk.
type CommentReactionCreateBulk struct {
	config
	builders []*CommentReactionCreate
}

// Save creates the CommentReaction entities in the database.
func (crcb *CommentReactionCreateBulk) Save(ctx context.Context) ([]*CommentReaction, error) {
	specs := make([]*sqlgraph.CreateSpec, len(crcb.builders))
	nodes := make([]*CommentReaction, len(crcb.builders))
	mutators := make([]Mutator, len(crcb.builders))
	for i := range crcb.builders {
		func(i int, root context.Context) {
			builder := crcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CommentReactionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, crcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, crcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, crcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (crcb *CommentReactionCreateBulk) SaveX(ctx context.Context) []*CommentReaction {
	v, err := crcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crcb *CommentReactionCreateBulk) Exec(ctx context.Context) error {
	_, err := crcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crcb *CommentReactionCreateBulk) ExecX(ctx context.Context) {
	if err := crcb.Exec(ctx); err != nil {
		panic(err)
	}
}
