// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/yura4ka/crickter/ent/post"
	"github.com/yura4ka/crickter/ent/postreaction"
	"github.com/yura4ka/crickter/ent/predicate"
	"github.com/yura4ka/crickter/ent/user"
)

// PostReactionUpdate is the builder for updating PostReaction entities.
type PostReactionUpdate struct {
	config
	hooks    []Hook
	mutation *PostReactionMutation
}

// Where appends a list predicates to the PostReactionUpdate builder.
func (pru *PostReactionUpdate) Where(ps ...predicate.PostReaction) *PostReactionUpdate {
	pru.mutation.Where(ps...)
	return pru
}

// SetLiked sets the "liked" field.
func (pru *PostReactionUpdate) SetLiked(b bool) *PostReactionUpdate {
	pru.mutation.SetLiked(b)
	return pru
}

// SetPostID sets the "post" edge to the Post entity by ID.
func (pru *PostReactionUpdate) SetPostID(id uuid.UUID) *PostReactionUpdate {
	pru.mutation.SetPostID(id)
	return pru
}

// SetNillablePostID sets the "post" edge to the Post entity by ID if the given value is not nil.
func (pru *PostReactionUpdate) SetNillablePostID(id *uuid.UUID) *PostReactionUpdate {
	if id != nil {
		pru = pru.SetPostID(*id)
	}
	return pru
}

// SetPost sets the "post" edge to the Post entity.
func (pru *PostReactionUpdate) SetPost(p *Post) *PostReactionUpdate {
	return pru.SetPostID(p.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pru *PostReactionUpdate) SetUserID(id uuid.UUID) *PostReactionUpdate {
	pru.mutation.SetUserID(id)
	return pru
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (pru *PostReactionUpdate) SetNillableUserID(id *uuid.UUID) *PostReactionUpdate {
	if id != nil {
		pru = pru.SetUserID(*id)
	}
	return pru
}

// SetUser sets the "user" edge to the User entity.
func (pru *PostReactionUpdate) SetUser(u *User) *PostReactionUpdate {
	return pru.SetUserID(u.ID)
}

// Mutation returns the PostReactionMutation object of the builder.
func (pru *PostReactionUpdate) Mutation() *PostReactionMutation {
	return pru.mutation
}

// ClearPost clears the "post" edge to the Post entity.
func (pru *PostReactionUpdate) ClearPost() *PostReactionUpdate {
	pru.mutation.ClearPost()
	return pru
}

// ClearUser clears the "user" edge to the User entity.
func (pru *PostReactionUpdate) ClearUser() *PostReactionUpdate {
	pru.mutation.ClearUser()
	return pru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pru *PostReactionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pru.sqlSave, pru.mutation, pru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pru *PostReactionUpdate) SaveX(ctx context.Context) int {
	affected, err := pru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pru *PostReactionUpdate) Exec(ctx context.Context) error {
	_, err := pru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pru *PostReactionUpdate) ExecX(ctx context.Context) {
	if err := pru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pru *PostReactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(postreaction.Table, postreaction.Columns, sqlgraph.NewFieldSpec(postreaction.FieldID, field.TypeUUID))
	if ps := pru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pru.mutation.Liked(); ok {
		_spec.SetField(postreaction.FieldLiked, field.TypeBool, value)
	}
	if pru.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   postreaction.PostTable,
			Columns: []string{postreaction.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   postreaction.PostTable,
			Columns: []string{postreaction.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   postreaction.UserTable,
			Columns: []string{postreaction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   postreaction.UserTable,
			Columns: []string{postreaction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{postreaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pru.mutation.done = true
	return n, nil
}

// PostReactionUpdateOne is the builder for updating a single PostReaction entity.
type PostReactionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PostReactionMutation
}

// SetLiked sets the "liked" field.
func (pruo *PostReactionUpdateOne) SetLiked(b bool) *PostReactionUpdateOne {
	pruo.mutation.SetLiked(b)
	return pruo
}

// SetPostID sets the "post" edge to the Post entity by ID.
func (pruo *PostReactionUpdateOne) SetPostID(id uuid.UUID) *PostReactionUpdateOne {
	pruo.mutation.SetPostID(id)
	return pruo
}

// SetNillablePostID sets the "post" edge to the Post entity by ID if the given value is not nil.
func (pruo *PostReactionUpdateOne) SetNillablePostID(id *uuid.UUID) *PostReactionUpdateOne {
	if id != nil {
		pruo = pruo.SetPostID(*id)
	}
	return pruo
}

// SetPost sets the "post" edge to the Post entity.
func (pruo *PostReactionUpdateOne) SetPost(p *Post) *PostReactionUpdateOne {
	return pruo.SetPostID(p.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pruo *PostReactionUpdateOne) SetUserID(id uuid.UUID) *PostReactionUpdateOne {
	pruo.mutation.SetUserID(id)
	return pruo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (pruo *PostReactionUpdateOne) SetNillableUserID(id *uuid.UUID) *PostReactionUpdateOne {
	if id != nil {
		pruo = pruo.SetUserID(*id)
	}
	return pruo
}

// SetUser sets the "user" edge to the User entity.
func (pruo *PostReactionUpdateOne) SetUser(u *User) *PostReactionUpdateOne {
	return pruo.SetUserID(u.ID)
}

// Mutation returns the PostReactionMutation object of the builder.
func (pruo *PostReactionUpdateOne) Mutation() *PostReactionMutation {
	return pruo.mutation
}

// ClearPost clears the "post" edge to the Post entity.
func (pruo *PostReactionUpdateOne) ClearPost() *PostReactionUpdateOne {
	pruo.mutation.ClearPost()
	return pruo
}

// ClearUser clears the "user" edge to the User entity.
func (pruo *PostReactionUpdateOne) ClearUser() *PostReactionUpdateOne {
	pruo.mutation.ClearUser()
	return pruo
}

// Where appends a list predicates to the PostReactionUpdate builder.
func (pruo *PostReactionUpdateOne) Where(ps ...predicate.PostReaction) *PostReactionUpdateOne {
	pruo.mutation.Where(ps...)
	return pruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pruo *PostReactionUpdateOne) Select(field string, fields ...string) *PostReactionUpdateOne {
	pruo.fields = append([]string{field}, fields...)
	return pruo
}

// Save executes the query and returns the updated PostReaction entity.
func (pruo *PostReactionUpdateOne) Save(ctx context.Context) (*PostReaction, error) {
	return withHooks(ctx, pruo.sqlSave, pruo.mutation, pruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pruo *PostReactionUpdateOne) SaveX(ctx context.Context) *PostReaction {
	node, err := pruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pruo *PostReactionUpdateOne) Exec(ctx context.Context) error {
	_, err := pruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pruo *PostReactionUpdateOne) ExecX(ctx context.Context) {
	if err := pruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pruo *PostReactionUpdateOne) sqlSave(ctx context.Context) (_node *PostReaction, err error) {
	_spec := sqlgraph.NewUpdateSpec(postreaction.Table, postreaction.Columns, sqlgraph.NewFieldSpec(postreaction.FieldID, field.TypeUUID))
	id, ok := pruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PostReaction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, postreaction.FieldID)
		for _, f := range fields {
			if !postreaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != postreaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pruo.mutation.Liked(); ok {
		_spec.SetField(postreaction.FieldLiked, field.TypeBool, value)
	}
	if pruo.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   postreaction.PostTable,
			Columns: []string{postreaction.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   postreaction.PostTable,
			Columns: []string{postreaction.PostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   postreaction.UserTable,
			Columns: []string{postreaction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   postreaction.UserTable,
			Columns: []string{postreaction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PostReaction{config: pruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{postreaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pruo.mutation.done = true
	return _node, nil
}
