// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/yura4ka/crickter/ent/comment"
	"github.com/yura4ka/crickter/ent/commentreaction"
	"github.com/yura4ka/crickter/ent/predicate"
	"github.com/yura4ka/crickter/ent/user"
)

// CommentReactionUpdate is the builder for updating CommentReaction entities.
type CommentReactionUpdate struct {
	config
	hooks    []Hook
	mutation *CommentReactionMutation
}

// Where appends a list predicates to the CommentReactionUpdate builder.
func (cru *CommentReactionUpdate) Where(ps ...predicate.CommentReaction) *CommentReactionUpdate {
	cru.mutation.Where(ps...)
	return cru
}

// SetLiked sets the "liked" field.
func (cru *CommentReactionUpdate) SetLiked(b bool) *CommentReactionUpdate {
	cru.mutation.SetLiked(b)
	return cru
}

// SetCommentID sets the "comment" edge to the Comment entity by ID.
func (cru *CommentReactionUpdate) SetCommentID(id uuid.UUID) *CommentReactionUpdate {
	cru.mutation.SetCommentID(id)
	return cru
}

// SetNillableCommentID sets the "comment" edge to the Comment entity by ID if the given value is not nil.
func (cru *CommentReactionUpdate) SetNillableCommentID(id *uuid.UUID) *CommentReactionUpdate {
	if id != nil {
		cru = cru.SetCommentID(*id)
	}
	return cru
}

// SetComment sets the "comment" edge to the Comment entity.
func (cru *CommentReactionUpdate) SetComment(c *Comment) *CommentReactionUpdate {
	return cru.SetCommentID(c.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (cru *CommentReactionUpdate) SetUserID(id uuid.UUID) *CommentReactionUpdate {
	cru.mutation.SetUserID(id)
	return cru
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (cru *CommentReactionUpdate) SetNillableUserID(id *uuid.UUID) *CommentReactionUpdate {
	if id != nil {
		cru = cru.SetUserID(*id)
	}
	return cru
}

// SetUser sets the "user" edge to the User entity.
func (cru *CommentReactionUpdate) SetUser(u *User) *CommentReactionUpdate {
	return cru.SetUserID(u.ID)
}

// Mutation returns the CommentReactionMutation object of the builder.
func (cru *CommentReactionUpdate) Mutation() *CommentReactionMutation {
	return cru.mutation
}

// ClearComment clears the "comment" edge to the Comment entity.
func (cru *CommentReactionUpdate) ClearComment() *CommentReactionUpdate {
	cru.mutation.ClearComment()
	return cru
}

// ClearUser clears the "user" edge to the User entity.
func (cru *CommentReactionUpdate) ClearUser() *CommentReactionUpdate {
	cru.mutation.ClearUser()
	return cru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cru *CommentReactionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cru.sqlSave, cru.mutation, cru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cru *CommentReactionUpdate) SaveX(ctx context.Context) int {
	affected, err := cru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cru *CommentReactionUpdate) Exec(ctx context.Context) error {
	_, err := cru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cru *CommentReactionUpdate) ExecX(ctx context.Context) {
	if err := cru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cru *CommentReactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(commentreaction.Table, commentreaction.Columns, sqlgraph.NewFieldSpec(commentreaction.FieldID, field.TypeUUID))
	if ps := cru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cru.mutation.Liked(); ok {
		_spec.SetField(commentreaction.FieldLiked, field.TypeBool, value)
	}
	if cru.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commentreaction.CommentTable,
			Columns: []string{commentreaction.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commentreaction.CommentTable,
			Columns: []string{commentreaction.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commentreaction.UserTable,
			Columns: []string{commentreaction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commentreaction.UserTable,
			Columns: []string{commentreaction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commentreaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cru.mutation.done = true
	return n, nil
}

// CommentReactionUpdateOne is the builder for updating a single CommentReaction entity.
type CommentReactionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CommentReactionMutation
}

// SetLiked sets the "liked" field.
func (cruo *CommentReactionUpdateOne) SetLiked(b bool) *CommentReactionUpdateOne {
	cruo.mutation.SetLiked(b)
	return cruo
}

// SetCommentID sets the "comment" edge to the Comment entity by ID.
func (cruo *CommentReactionUpdateOne) SetCommentID(id uuid.UUID) *CommentReactionUpdateOne {
	cruo.mutation.SetCommentID(id)
	return cruo
}

// SetNillableCommentID sets the "comment" edge to the Comment entity by ID if the given value is not nil.
func (cruo *CommentReactionUpdateOne) SetNillableCommentID(id *uuid.UUID) *CommentReactionUpdateOne {
	if id != nil {
		cruo = cruo.SetCommentID(*id)
	}
	return cruo
}

// SetComment sets the "comment" edge to the Comment entity.
func (cruo *CommentReactionUpdateOne) SetComment(c *Comment) *CommentReactionUpdateOne {
	return cruo.SetCommentID(c.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (cruo *CommentReactionUpdateOne) SetUserID(id uuid.UUID) *CommentReactionUpdateOne {
	cruo.mutation.SetUserID(id)
	return cruo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (cruo *CommentReactionUpdateOne) SetNillableUserID(id *uuid.UUID) *CommentReactionUpdateOne {
	if id != nil {
		cruo = cruo.SetUserID(*id)
	}
	return cruo
}

// SetUser sets the "user" edge to the User entity.
func (cruo *CommentReactionUpdateOne) SetUser(u *User) *CommentReactionUpdateOne {
	return cruo.SetUserID(u.ID)
}

// Mutation returns the CommentReactionMutation object of the builder.
func (cruo *CommentReactionUpdateOne) Mutation() *CommentReactionMutation {
	return cruo.mutation
}

// ClearComment clears the "comment" edge to the Comment entity.
func (cruo *CommentReactionUpdateOne) ClearComment() *CommentReactionUpdateOne {
	cruo.mutation.ClearComment()
	return cruo
}

// ClearUser clears the "user" edge to the User entity.
func (cruo *CommentReactionUpdateOne) ClearUser() *CommentReactionUpdateOne {
	cruo.mutation.ClearUser()
	return cruo
}

// Where appends a list predicates to the CommentReactionUpdate builder.
func (cruo *CommentReactionUpdateOne) Where(ps ...predicate.CommentReaction) *CommentReactionUpdateOne {
	cruo.mutation.Where(ps...)
	return cruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cruo *CommentReactionUpdateOne) Select(field string, fields ...string) *CommentReactionUpdateOne {
	cruo.fields = append([]string{field}, fields...)
	return cruo
}

// Save executes the query and returns the updated CommentReaction entity.
func (cruo *CommentReactionUpdateOne) Save(ctx context.Context) (*CommentReaction, error) {
	return withHooks(ctx, cruo.sqlSave, cruo.mutation, cruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cruo *CommentReactionUpdateOne) SaveX(ctx context.Context) *CommentReaction {
	node, err := cruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cruo *CommentReactionUpdateOne) Exec(ctx context.Context) error {
	_, err := cruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cruo *CommentReactionUpdateOne) ExecX(ctx context.Context) {
	if err := cruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cruo *CommentReactionUpdateOne) sqlSave(ctx context.Context) (_node *CommentReaction, err error) {
	_spec := sqlgraph.NewUpdateSpec(commentreaction.Table, commentreaction.Columns, sqlgraph.NewFieldSpec(commentreaction.FieldID, field.TypeUUID))
	id, ok := cruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CommentReaction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, commentreaction.FieldID)
		for _, f := range fields {
			if !commentreaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != commentreaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cruo.mutation.Liked(); ok {
		_spec.SetField(commentreaction.FieldLiked, field.TypeBool, value)
	}
	if cruo.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commentreaction.CommentTable,
			Columns: []string{commentreaction.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commentreaction.CommentTable,
			Columns: []string{commentreaction.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commentreaction.UserTable,
			Columns: []string{commentreaction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   commentreaction.UserTable,
			Columns: []string{commentreaction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CommentReaction{config: cruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{commentreaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cruo.mutation.done = true
	return _node, nil
}
